//program to convert infix expression to prefix

#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#define max 100
int top=-1, a[max];
void push(char x)      //push function
{
	a[++top]=x;
}
char pop()                   //pop function
{
	if(top==-1)       //checking if the stack is empty
	  return -1;
	else
          return a[top--];    //decrementing the top value
}
int priority (char c)      //assigning priority to the  characters
{
  	if(c==')')
  	   return 0;
  	   
  	else if(c=='+'||c=='-')
           return 1;
           
        else if(c=='*'||c=='/')
           return 2;
}
void strrev(char *exp)      //reversing the string
{
	char temp[50];
	int size=strlen(exp);     
	temp[size--]='\0';
	int i=0;
	while(temp[i]!='\0')
	{
	   temp[size]=exp[i];       
	   i++;
	   size--;
	}
	strcpy(exp,temp);     //copying the string
}
void iprefix(char infix[max],char prefix[max])
{
	char temp,x;
	int i=0,j=0;
	strrev(infix);
	while(infix[i]!='\0')
	{
		temp=infix[i];
		if(isalnum(temp))
		{
			prefix[j++]=temp;
                }
                else if(temp==')')
                        push(temp);
                else if(temp=='(')
                {
                	while((x=pop())!=')')
                	{
                		prefix[j++]=x;
                	}
                }
                else
                {
                	while(priority(a[top])>=priority(temp))  
                	{
                		prefix[j++]=pop();
                	}
                push(temp);
                }
                i++;
                }
                while(top!=-1)
                	prefix[j++]=pop();   
                	prefix[j]='\0';
                	strrev(prefix);
}
int main()           //main function
{
	char infix[max],prefix[max];
	printf("enter infix expression:\n");
	scanf("%s", infix);
	printf("the infix expression is %s\n", infix);
	iprefix(infix, prefix);
	printf("the prefix expression is %s\n", prefix);
	return 0;
}
